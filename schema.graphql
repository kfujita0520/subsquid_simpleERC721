enum ContractStandard {
  ERC20
  ERC721
  ERC1155
}

enum TransferType {
  TRANSFER
  MINT
  BURN
}

enum TransferDirection {
  From
  To
}

type Account @entity {
  id: ID!

  nftTransfers: [AccountNftTransfer] @derivedFrom(field: "account")

  ownedTokens: [NfToken] @derivedFrom(field: "currentOwner")
}

type Collection @entity {
  id: ID! # Contract address
  collectionType: ContractStandard! @index
  nfts: [NfToken] @derivedFrom(field: "collection")
  createdAtBlock: BigInt!
  createdAt: DateTime!
}

interface Token {
  id: ID!
  name: String
  symbol: String
}

# ERC721 / ERC1155 tokens (Non-Fungible Token)
type NfToken implements Token @entity {
  id: ID! # <token_contract_address>-<token_id>
  nativeId: String!
  name: String @index
  symbol: String @index
  collection: Collection!
  uri: String
  currentOwner: Account! # "to" account in transfer
  amount: BigInt! @index
  isBurned: Boolean! @index
}

interface Transfer {
  id: ID!
  blockNumber: BigInt!
  timestamp: DateTime!
  eventIndex: Int!
  txnHash: String!
  from: Account!
  to: Account!
  amount: BigInt
  transferType: TransferType
}

# Non-Fungible token transfers
type NftTransfer implements Transfer @entity {
  id: ID!
  blockNumber: BigInt! @index
  timestamp: DateTime!
  eventIndex: Int!
  txnHash: String!
  from: Account!
  to: Account!
  operator: Account
  amount: BigInt! @index
  transferType: TransferType @index
  token: NfToken!
  isBatch: Boolean!
}

# entity for linking account and NFT transfer
type AccountNftTransfer @entity {
  id: ID!
  transfer: NftTransfer
  account: Account!
  direction: TransferDirection
}
